"use strict";(self.webpackChunktestapp=self.webpackChunktestapp||[]).push([[19854],{19854:(e,t,n)=>{n.r(t),n.d(t,{TextureCompressionWorkerOutput:()=>d,compress:()=>f,compressRGBADataToKTX2:()=>p,createTextureDataKTX2:()=>C,initializeBasisEncoder:()=>w,initializeDXTEncoder:()=>T});var a=n(28899);let r;var s=n(45235);let i;var l=n(93345);let c,o,u=null,h=null;class d{constructor(e,t){this.internalFormat=e,this.compressedTexture=t}}async function f(e){const t=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=new OffscreenCanvas(e.width,e.height),a=n.getContext("2d");return t&&a.scale(1,-1),a.drawImage(e,0,t?-e.height:0),a.getImageData(0,0,n.width,n.height).data}(e.data,e.flipped);if(e.hasS3TC){h||await T();const n=new Uint8Array(t.length);h?.encode(new Uint8Array(t),e.width,e.height,n);const a=function(e,t){const n=new Int32Array(e.buffer,e.byteOffset,m);let a,r;switch(n[_]){case R:a=8,r=l.CQ.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case X:a=16,r=l.CQ.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case v:a=16,r=l.CQ.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let s=1,i=n[E],c=n[A];(3&i||3&c)&&(i=i+3&-4,c=c+3&-4);const o=i,u=c;let h,d;n[y]&b&&!1!==t&&(s=Math.max(1,n[S]));let f=e.byteOffset+n[g]+4;const w=[];for(let l=0;l<s;++l)d=(i+3>>2)*(c+3>>2)*a,h=new Uint8Array(e.buffer,f,d),w.push(h),f+=d,i=Math.max(1,i>>1),c=Math.max(1,c>>1);return{textureData:{type:"compressed",levels:w},internalFormat:r,width:o,height:u}}(n,!0),r=[n.buffer];return{result:new d(a?.internalFormat??null,a?.textureData??null),transferList:r}}if(e.hasETC){u||await w();const n=await p(t,e.width,e.height,e.hasMipmap),a=n?await C(n):null,r=a?.compressedTexture?.levels.map((e=>e.buffer))||[];return{result:new d(a?.internalFormat??null,a?.compressedTexture??null),transferList:r}}return{result:new d(null,null)}}async function w(){u||(u=await(c??=(r??=(async()=>{const e=await n.e(56378).then(n.bind(n,56378)),t=await e.default({locateFile:e=>(0,a.s)(`esri/libs/basisu/${e}`)});return t.initializeBasis(),t})(),r)))}async function T(){h||(h=await(o??=(i??=(async()=>{const e=await n.e(53996).then(n.bind(n,53996));return await e.default({locateFile:e=>(0,a.s)(`esri/libs/dxtEncoder/${e}`)})})(),i)))}async function p(e,t,n,a){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:255,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],l=arguments.length>7&&void 0!==arguments[7]&&arguments[7];if(!u)return null;const c=new u.BasisEncoder;c.setPerceptual(!l),c.setCheckForAlpha(!0),c.setForceAlpha(!1),c.setRenormalize(l),c.setMipGen(a),c.setMipSRGB(!l),c.setCreateKTX2File(!0),c.setKTX2SRGBTransferFunc(!l),c.setQualityLevel(r),c.setCompressionLevel(s);const o=new Uint8Array(e.byteLength);c.setSliceSourceImage(0,new Uint8Array(e),t,n,i);const h=c.encode(o),d=new Uint8Array(o.buffer,0,h),f=new u.KTX2File(new Uint8Array(d));return f.isValid()?(c.delete(),d):(f.close(),f.delete(),c.delete(),null)}async function C(e){if(!u)return new d(null,null);const t=new u.KTX2File(new Uint8Array(e));t.startTranscoding();const[n,a]=t.getHasAlpha()?[s.n.ETC2_RGBA,l.CQ.COMPRESSED_RGBA8_ETC2_EAC]:[s.n.ETC1_RGB,l.CQ.COMPRESSED_RGB8_ETC2],r=t.getLevels(),i=[];for(let s=0;s<r;s++)i.push(new Uint8Array(t.getImageTranscodedSizeInBytes(s,0,0,n))),t.transcodeImage(i[s],s,0,0,n,0,-1,-1);return t.close(),t.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:i}}}const m=31,g=1,y=2,A=3,E=4,S=7,_=21,b=131072;function D(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const R=D("DXT1"),X=D("DXT3"),v=D("DXT5")}}]);
//# sourceMappingURL=19854.c1565d19.chunk.js.map