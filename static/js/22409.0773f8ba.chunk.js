"use strict";(self.webpackChunktestapp=self.webpackChunktestapp||[]).push([[22409,99224],{18027:(e,o,t)=>{t.d(o,{A:()=>d});var i=t(35143),l=t(45802),r=t(42553),n=t(46053),s=(t(81806),t(76460),t(47249),t(85842));const p=new l.J({pointCloudFixedSizeAlgorithm:"fixed-size",pointCloudSplatAlgorithm:"splat"});let u=class extends r.A{};(0,i._)([(0,n.MZ)({type:p.apiValues,readOnly:!0,nonNullable:!0,json:{type:p.jsonValues,read:!1,write:{writer:p.write,isRequired:!0}}})],u.prototype,"type",void 0),u=(0,i._)([(0,s.$)("esri.renderers.support.pointCloud.PointSizeAlgorithm")],u);const d=u},22409:(e,o,t)=>{t.r(o),t.d(o,{default:()=>y});var i,l=t(35143),r=t(53084),n=t(46053),s=(t(81806),t(76460),t(6409)),p=t(85842),u=t(99224),d=t(84563),a=t(95542);let c=i=class extends u.default{constructor(e){super(e),this.type="point-cloud-unique-value",this.field=null,this.fieldTransformType=null,this.colorUniqueValueInfos=null,this.legendOptions=null}clone(){return new i({...this.cloneProperties(),field:(0,r.clone)(this.field),fieldTransformType:(0,r.clone)(this.fieldTransformType),colorUniqueValueInfos:(0,r.clone)(this.colorUniqueValueInfos),legendOptions:(0,r.clone)(this.legendOptions)})}};(0,l._)([(0,s.e)({pointCloudUniqueValueRenderer:"point-cloud-unique-value"})],c.prototype,"type",void 0),(0,l._)([(0,n.MZ)({json:{write:{isRequired:!0}},type:String})],c.prototype,"field",void 0),(0,l._)([(0,n.MZ)({type:u.default.fieldTransformTypeKebabDict.apiValues,json:{type:u.default.fieldTransformTypeKebabDict.jsonValues,read:u.default.fieldTransformTypeKebabDict.read,write:u.default.fieldTransformTypeKebabDict.write}})],c.prototype,"fieldTransformType",void 0),(0,l._)([(0,n.MZ)({type:[a.A],json:{write:{isRequired:!0}}})],c.prototype,"colorUniqueValueInfos",void 0),(0,l._)([(0,n.MZ)({type:d.A,json:{write:!0}})],c.prototype,"legendOptions",void 0),c=i=(0,l._)([(0,p.$)("esri.renderers.PointCloudUniqueValueRenderer")],c);const y=c},56125:(e,o,t)=>{t.d(o,{A:()=>d});var i,l=t(35143),r=t(46053),n=(t(81806),t(76460),t(47249),t(6409)),s=t(85842),p=t(18027);let u=i=class extends p.A{constructor(){super(...arguments),this.type="splat",this.scaleFactor=1}clone(){return new i({scaleFactor:this.scaleFactor})}};(0,l._)([(0,n.e)({pointCloudSplatAlgorithm:"splat"})],u.prototype,"type",void 0),(0,l._)([(0,r.MZ)({type:Number,value:1,nonNullable:!0,json:{write:{isRequired:!0}}})],u.prototype,"scaleFactor",void 0),u=i=(0,l._)([(0,s.$)("esri.renderers.support.pointCloud.PointSizeSplatAlgorithm")],u);const d=u},95542:(e,o,t)=>{t.d(o,{A:()=>c});var i,l=t(35143),r=t(69539),n=t(42553),s=t(53084),p=t(46053),u=t(40565),d=t(85842);let a=i=class extends n.A{constructor(){super(...arguments),this.description=null,this.label=null,this.values=null,this.color=null}clone(){return new i({description:this.description,label:this.label,values:(0,s.clone)(this.values),color:(0,s.clone)(this.color)})}};(0,l._)([(0,p.MZ)({type:String,json:{write:!0}})],a.prototype,"description",void 0),(0,l._)([(0,p.MZ)({type:String,json:{write:!0}})],a.prototype,"label",void 0),(0,l._)([(0,p.MZ)({type:[String],json:{write:{isRequired:!0}}})],a.prototype,"values",void 0),(0,l._)([(0,p.MZ)({type:r.default,json:{type:[u.jz],write:{isRequired:!0}}})],a.prototype,"color",void 0),a=i=(0,l._)([(0,d.$)("esri.renderers.support.pointCloud.ColorUniqueValueInfo")],a);const c=a},99224:(e,o,t)=>{t.r(o),t.d(o,{default:()=>S});var i,l=t(35143),r=t(45802),n=t(42553),s=t(53084),p=t(46053),u=(t(81806),t(76460),t(85842));t(47249);let d=i=class extends n.A{constructor(){super(...arguments),this.field=null,this.minValue=0,this.maxValue=255}clone(){return new i({field:this.field,minValue:this.minValue,maxValue:this.maxValue})}};(0,l._)([(0,p.MZ)({type:String,json:{write:{isRequired:!0}}})],d.prototype,"field",void 0),(0,l._)([(0,p.MZ)({type:Number,nonNullable:!0,json:{write:{isRequired:!0}}})],d.prototype,"minValue",void 0),(0,l._)([(0,p.MZ)({type:Number,nonNullable:!0,json:{write:{isRequired:!0}}})],d.prototype,"maxValue",void 0),d=i=(0,l._)([(0,u.$)("esri.renderers.support.pointCloud.ColorModulation")],d);const a=d;var c,y=t(18027),h=t(6409);let f=c=class extends y.A{constructor(){super(...arguments),this.type="fixed-size",this.size=0,this.useRealWorldSymbolSizes=null}clone(){return new c({size:this.size,useRealWorldSymbolSizes:this.useRealWorldSymbolSizes})}};(0,l._)([(0,h.e)({pointCloudFixedSizeAlgorithm:"fixed-size"})],f.prototype,"type",void 0),(0,l._)([(0,p.MZ)({type:Number,nonNullable:!0,json:{write:{isRequired:!0}}})],f.prototype,"size",void 0),(0,l._)([(0,p.MZ)({type:Boolean,json:{write:!0}})],f.prototype,"useRealWorldSymbolSizes",void 0),f=c=(0,l._)([(0,u.$)("esri.renderers.support.pointCloud.PointSizeFixedSizeAlgorithm")],f);const m=f;var b=t(56125);const v={key:"type",base:y.A,typeMap:{"fixed-size":m,splat:b.A}},w=(0,r.O)()({pointCloudClassBreaksRenderer:"point-cloud-class-breaks",pointCloudRGBRenderer:"point-cloud-rgb",pointCloudStretchRenderer:"point-cloud-stretch",pointCloudUniqueValueRenderer:"point-cloud-unique-value"});let _=class extends n.A{constructor(e){super(e),this.type=void 0,this.pointSizeAlgorithm=null,this.colorModulation=null,this.pointsPerInch=10}clone(){return console.warn(".clone() is not implemented for "+this.declaredClass),null}cloneProperties(){return{pointSizeAlgorithm:(0,s.clone)(this.pointSizeAlgorithm),colorModulation:(0,s.clone)(this.colorModulation),pointsPerInch:(0,s.clone)(this.pointsPerInch)}}};(0,l._)([(0,p.MZ)({type:w.apiValues,readOnly:!0,nonNullable:!0,json:{type:w.jsonValues,read:!1,write:{writer:w.write,isRequired:!0}}})],_.prototype,"type",void 0),(0,l._)([(0,p.MZ)({types:v,json:{write:!0}})],_.prototype,"pointSizeAlgorithm",void 0),(0,l._)([(0,p.MZ)({type:a,json:{write:!0}})],_.prototype,"colorModulation",void 0),(0,l._)([(0,p.MZ)({json:{write:!0},nonNullable:!0,type:Number})],_.prototype,"pointsPerInch",void 0),_=(0,l._)([(0,u.$)("esri.renderers.PointCloudRenderer")],_),(_||(_={})).fieldTransformTypeKebabDict=new r.J({none:"none",lowFourBit:"low-four-bit",highFourBit:"high-four-bit",absoluteValue:"absolute-value",moduloTen:"modulo-ten"});const S=_}}]);
//# sourceMappingURL=22409.0773f8ba.chunk.js.map