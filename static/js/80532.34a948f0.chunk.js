"use strict";(self.webpackChunktestapp=self.webpackChunktestapp||[]).push([[53855,75166,80532,85685],{770:(e,t,a)=>{a.d(t,{bG:()=>l,Ty:()=>r,YJ:()=>c,Fq:()=>u,vt:()=>s});var n=a(53084),i=a(42633);class o{constructor(e){const{name:t,label:a,description:n,schemes:o}=e;this.name=t,this.label=a,this.description=n,this.schemes=o;const l=e.basemapGroups||i.Np;let s=[];Object.keys(l).forEach((e=>{s=s.concat(l[e])})),this.supportedBasemaps=s,this.basemapGroups=l}isBasemapSupported(e){const t=(0,i.T1)(e,this.supportedBasemaps);return!(!t||!this.supportedBasemaps.includes(t))}getRawSchemes(e){const{basemapId:t,basemapTheme:a}=function(e,t,a){let n=null,o=null;if(t&&(n=(0,i.T1)(t,e,!1),n)){const e=(0,i.BV)(n);null!=e&&(o=e)}return!n&&a&&(n="dark"===a?"dark-gray":"gray",o=a),n||o||(n="gray",o="light"),{basemapId:n,basemapTheme:o}}(this.supportedBasemaps,e.basemap,e.basemapTheme);let o=a;if(t){const e=(0,i.BV)(t,this.basemapGroups);null!=e&&(o=e)}let l=e.geometryType;"multipoint"===l?l="point":"mesh"===l&&(l="polygon");const s=this.schemes[l]||this.schemes.default;return{schemesInfo:(0,n.clone)(s[o]),basemapId:t,basemapTheme:a}}}function l(e){const t=e.themeDictionary,a=new Map;for(const n in t){const e=t[n];a.set(n,new o(e))}return a}function s(e,t){const a=[];return e.forEach((e=>{e.isBasemapSupported(t)&&a.push({name:e.name,label:e.label,description:e.description,basemaps:[...e.supportedBasemaps]})})),a}function r(e,t){if(!e)return;if(!t)return;let a=null;const n=[t.primaryScheme,...t.secondarySchemes];for(const i of n)if(i.name?.toLowerCase()===e.toLowerCase()){a=i;break}return a}function c(e,t,a){if(!e&&!t)return[];if(!a)return[];const n=!e?.length,i=!t?.length,o=[a.primaryScheme,...a.secondarySchemes],l=[];for(const s of o){const a=!!n||e.some((e=>s.tags.includes(e))),o=!i&&t.some((e=>s.tags.includes(e)));a&&!o&&l.push(s)}return l}function u(e){const t=e.theme;if(t)return t.getRawSchemes({basemap:e.basemap,geometryType:e.geometryType,basemapTheme:e.basemapTheme})}},29857:(e,t,a)=>{a.r(t),a.d(t,{default:()=>g});var n=a(50076),i=a(68002),o=a(16525),l=a(90494),s=a(11563);const r=500,c=1e8,u=1280,p=12,m=30,f=15;async function d(e){const{view:t,sampleSize:a}=e;if(!e||!e.layer)throw new n.default("scale-range:missing-parameters","'layer' parameter is required");if(e.snapToLOD&&!t)throw new n.default("scale-range:missing-parameters","'view' parameter is required when 'snapToLOD' is true");e.forBinning&&(0,l.p)(e,"scale-range");const{layer:i,...o}=e,c=e.forBinning?s.Mi:s.J4,u=(0,s.Jg)(i,c,e.forBinning);if(!u)throw new n.default("scale-range:invalid-parameters","'layer' must be one of these types: "+(0,s.Ho)(c).join(", "));const p={layerAdapter:u,...o};p.sampleSize=a||r,await(t?.when());const m=null!=p.signal?{signal:p.signal}:null;return await u.load(m),p}function h(e,t,a){const n=function(e,t){const a=p,n=u/4,i=m,o=u/4,l=f,s=u/2;let r=0,c=0,d=0,h=0;switch(e){case"point":case"multipoint":{const e=t;r=e.avgMinDistance??0,c=a,d=e.minDistance??0,h=n;break}case"polyline":{const e=t;r=e.avgLength??0,c=i,d=e.minLength??0,h=o;break}case"polygon":{const e=t;r=e.avgSize??0,c=l,d=e.minSize??0,h=s;break}}return{resolutionForMinScale:r>0?r/c:null,resolutionForMaxScale:d>0?d/h:null}}(e.geometryType,t),o=a?.spatialReference||e.layer.spatialReference;return{minScale:(0,i.gB)(n.resolutionForMinScale??0,o),maxScale:(0,i.gB)(n.resolutionForMaxScale??0,o)}}function y(e,t){let a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(e.constraints&&"effectiveLODs"in e.constraints){const n=e.constraints.effectiveLODs,i=a?n:n.slice().reverse();let o=null;for(const e of i)if(!(a?e.scale>t:e.scale<t)){o=e;break}return o}}function w(e,t,a,i){const{view:o,snapToLOD:l,layerAdapter:s}=e;if(l&&o){const e=y(o,t),n=y(o,a,!1);t=e?e.scale:t,a=n?n.scale:a}if(t<a)throw new n.default("scale-range:invalid","calculated minScale is less than maxScale.");return a>t/2&&(a=Math.floor(a/2)),t>c&&(t=0),"polygon"!==s.geometryType&&(a=0),{minScale:Math.ceil(t),maxScale:Math.floor(a),spatialStatistics:i}}async function g(e){const t=await d(e),{view:a,sampleSize:i,layerAdapter:l,signal:s,filter:r}=t,c=await l.getSampleFeatures({view:a,sampleSize:i,returnGeometry:!0,filter:r,signal:s},"json");if(!c?.length)throw new n.default("scale-range:insufficient-info","No features are available to calculate statistics");const u=await(0,o.A)({features:c,geometryType:l.geometryType}),{minScale:p,maxScale:m}=h(l,u,a);return w(t,p,m,u)}},31650:(e,t,a)=>{a.r(t),a.d(t,{default:()=>x});a(81806);var n=a(50076),i=a(76931),o=a(68002),l=a(43996),s=a(63040),r=a(29857),c=a(90494),u=a(11563);const p=1e8,m=1128.497176,f=591657527.591555,d=[10,8,4,2],h=[100,100,60,30],y=[2,1,.75,.5],w=[32,18,12,6],g=[{level:0,resolution:156543.03392800014,scale:591657527.591555},{level:1,resolution:78271.51696399994,scale:295828763.795777},{level:2,resolution:39135.75848200009,scale:147914381.897889},{level:3,resolution:19567.87924099992,scale:73957190.948944},{level:4,resolution:9783.93962049996,scale:36978595.474472},{level:5,resolution:4891.96981024998,scale:18489297.737236},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},{level:11,resolution:76.43702828507324,scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,scale:1128.497176}];function v(e,t){const{view:a}=e;if(!a)throw new n.default("scale-range:invalid-parameters","'view' is required");const i=t.minScale||p,o=a.constraints&&"effectiveLODs"in a.constraints&&a.constraints.effectiveLODs||g,l=[];for(let n=0;n<o.length;n++){if(o[n].scale>i)continue;const e=Number(n),t=[e-3,e,e+3,e+6];for(const a of t)a>-1&&a<o.length&&l.push(o[a].scale);break}return l.sort(((e,t)=>e-t))}function b(e,t){const{view:a,layerAdapter:i}=e;if(!a)throw new n.default("scale-range:invalid-parameters","'view' is required");const l=i.fullExtent,s=i.minScale||m,r=i.maxScale||f,c=t.minScale||0,u=t.maxScale||0;let p=null!=l?(0,o.X_)(a,l):0;return p=p<s&&p>r?p:0,{scales:[s,r,c,u,p].map(Math.round).sort(((e,t)=>e-t)).filter(((e,t,a)=>!!e&&a.indexOf(e)===t)).filter(((e,t,a)=>!t||Math.abs(e-a[t-1])>5)),fullExtentScale:p}}function S(e,t){const{spatialStatistics:a,minScale:o,maxScale:r}=t;if(!("avgSize"in a)||!a.avgSize)throw new n.default("size-range:insufficient-info","average polygon size is invalid");const c=a.avgSize,{view:u}=e;if(!u)throw new n.default("scale-range:invalid-parameters","'view' is required");const{resolution:p,scale:m}=u,f=p/m,{scales:d,fullExtentScale:h}=b(e,{minScale:o,maxScale:r}),y=[],w=[];return d.forEach(((e,t)=>{const{min:a,max:n}=function(e,t){const a=Math.ceil(e/t);let n=Math.ceil(a/4);n<4?n=4:n>16&&(n=16);const i=5*n;return{min:n,max:i<50?50:i}}(c,f*e),o=d.indexOf(h),l=o>-1&&t>o?2:1;y.push(new s.default({value:e,size:(0,i.PN)(a/l)})),w.push(new s.default({value:e,size:(0,i.PN)(n/l)}))})),{minSize:new l.default({valueExpression:"$view.scale",stops:y}),maxSize:new l.default({valueExpression:"$view.scale",stops:w})}}async function x(e){const t=await async function(e){const{view:t}=e;if(!(e&&t&&e.layer))throw new n.default("size-range:missing-parameters","'view' and 'layer' parameters are required");e.forBinning&&(0,c.p)(e,"size-range");const{layer:a,...i}=e,o=e.forBinning?u.Mi:u.J4,l=(0,u.Jg)(a,o,e.forBinning);if(!l)throw new n.default("size-range:invalid-parameters","'layer' must be one of these types: "+(0,u.Ho)(o).join(", "));const s={layerAdapter:l,...i,view:t};await t.when();const r=null!=s.signal?{signal:s.signal}:null;await l.load(r);const p=l.geometryType;if("point"!==p&&"multipoint"!==p&&"polyline"!==p&&"polygon"!==p)throw new n.default("size-range:not-supported",`sizeRange is not supported for geometryType: ${p}`);return s}(e),{view:a,layerAdapter:o,signal:p,filter:m}=t,f=await(0,r.default)({layer:o,view:a,signal:p,filter:m});switch(o.geometryType){case"point":case"multipoint":return function(e,t){const{minScale:a,maxScale:o}=t,r=v(e,{minScale:a,maxScale:o});if(!r.length)throw new n.default("scale-range:insufficient-info","not enough scale values");return{minSize:new l.default({valueExpression:"$view.scale",stops:r.map(((e,t)=>new s.default({value:e,size:(0,i.PN)(d[t])})))}),maxSize:new l.default({valueExpression:"$view.scale",stops:r.map(((e,t)=>new s.default({value:e,size:(0,i.PN)(h[t])})))})}}(t,f);case"polyline":return function(e,t){const{minScale:a,maxScale:o}=t,r=v(e,{minScale:a,maxScale:o});if(!r.length)throw new n.default("scale-range:insufficient-info","not enough scale values");return{minSize:new l.default({valueExpression:"$view.scale",stops:r.map(((e,t)=>new s.default({value:e,size:(0,i.PN)(y[t])})))}),maxSize:new l.default({valueExpression:"$view.scale",stops:r.map(((e,t)=>new s.default({value:e,size:(0,i.PN)(w[t])})))})}}(t,f);case"polygon":return S(t,f);case"mesh":case"multipatch":return null}return null}},53855:(e,t,a)=>{a.r(t),a.d(t,{cloneScheme:()=>u,getSchemes:()=>c,getThemes:()=>r});var n=a(69539),i=a(18690),o=a(770),l=a(80791);const s=(0,o.bG)({themeDictionary:{default:{name:"default",label:"Default",description:"Default theme for basic visualization of features.",schemes:{point:{light:{primary:{color:[77,77,77,1],outline:{color:[255,255,255,.25],width:"1px"},size:"8px"},secondary:[{color:[226,119,40,1],outline:{color:[255,255,255,.25],width:"1px"},size:"8px"},{color:[255,255,255,1],outline:{color:[51,51,51,.25],width:"1px"},size:"8px"}]},dark:{primary:{color:[255,255,255,1],outline:{color:[92,92,92,.25],width:"1px"},size:"8px"},secondary:[{color:[226,119,40,1],outline:{color:[255,255,255,.25],width:"1px"},size:"8px"},{color:[26,26,26,1],outline:{color:[178,178,178,.25],width:"1px"},size:"8px"}]}},polyline:{light:{primary:{color:[77,77,77,1],width:"2px"},secondary:[{color:[226,119,40,1],width:"2px"},{color:[255,255,255,1],width:"2px"}]},dark:{primary:{color:[255,255,255,1],width:"2px"},secondary:[{color:[226,119,40,1],width:"2px"},{color:[26,26,26,1],width:"2px"}]}},polygon:{light:{primary:{size:"12px",color:[227,139,79,1],outline:{color:[255,255,255,.25],width:"1px"},opacity:.8},secondary:[{size:"12px",color:[128,128,128,1],outline:{color:[255,255,255,.25],width:"1px"},opacity:.8},{size:"12px",color:[255,255,255,1],outline:{color:[128,128,128,.25],width:"1px"},opacity:.8}]},dark:{primary:{size:"12px",color:[227,139,79,1],outline:{color:[92,92,92,.25],width:"1px"},opacity:.8},secondary:[{size:"12px",color:[178,178,178,1],outline:{color:[92,92,92,.25],width:"1px"},opacity:.8},{size:"12px",color:[26,26,26,1],outline:{color:[128,128,128,.25],width:"1px"},opacity:.8}]}}}}}});function r(e){return(0,o.vt)(s,e)}function c(e){const t=(0,o.Fq)({basemap:e.basemap,geometryType:e.geometryType,basemapTheme:e.basemapTheme,theme:s.get("default")});if(!t)return;const{schemesInfo:a,basemapId:n,basemapTheme:l}=t;return{primaryScheme:p(e,a.primary),secondarySchemes:a.secondary.map((t=>p(e,t))).filter(i.Ru),basemapId:n,basemapTheme:l}}function u(e){if(!e)return;const t={...e};return t.color&&(t.color=new n.default(t.color)),"outline"in t&&t.outline&&(t.outline={color:t.outline.color&&new n.default(t.outline.color),width:t.outline.width}),t}function p(e,t){const a="mesh"!==e.geometryType&&e.worldScale?e.view:null;switch(e.geometryType){case"point":case"multipoint":{const e=t;return function(e,t){return{color:new n.default(e.color),outline:{color:new n.default(e.outline.color),width:e.outline.width},size:t?(0,l._J)(e.size,t):e.size,opacity:1}}({color:e.color,outline:{...e.outline},size:e.size},a)}case"polyline":{const e=t;return function(e,t){return{color:new n.default(e.color),width:t?(0,l._J)(e.width,t):e.width,opacity:1}}({color:e.color,width:e.width},a)}case"polygon":{const e=t;return function(e,t){return{color:new n.default(e.color),outline:{color:new n.default(e.outline.color),width:e.outline.width},size:t?(0,l._J)(e.size,t):e.size,opacity:e.opacity}}({size:e.size,color:e.color,outline:{...e.outline},opacity:e.opacity},a)}case"mesh":{const e=t;return function(e){return{color:new n.default(e.color),opacity:e.opacity}}({color:e.color,opacity:e.opacity})}}}},80532:(e,t,a)=>{a.r(t),a.d(t,{createRenderer:()=>p});var n=a(50076),i=a(5766),o=a(33766),l=a(31650),s=a(51006),r=a(90494),c=a(11563),u=a(53855);async function p(e){const t=await async function(e){if(!e?.layer)throw new n.default("location-renderer:missing-parameters","'layer' parameter is required");e.forBinning&&(0,r.p)(e,"location-renderer");const t={...e,layer:e.layer};t.symbolType=t.symbolType||"2d";const a=e.forBinning?c.Mi:c.J4,i=(0,c.Jg)(t.layer,a,e.forBinning);if(!i)throw new n.default("location-renderer:invalid-parameters","'layer' must be one of these types: "+(0,c.Ho)(a).join(", "));t.layer=i;const o=null!=t.signal?{signal:t.signal}:null;await i.load(o);const l=i.geometryType;if(t.outlineOptimizationEnabled="polygon"===l&&t.outlineOptimizationEnabled,t.sizeOptimizationEnabled=("point"===l||"multipoint"===l||"polyline"===l)&&t.sizeOptimizationEnabled,"mesh"===l)t.symbolType="3d-volumetric",t.colorMixMode=t.colorMixMode||"replace",t.edgesType=t.edgesType||"none";else{if("3d-volumetric-uniform"===t.symbolType&&"point"!==l)throw new n.default("location-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");if(t.symbolType.includes("3d-volumetric")&&(!t.view||"3d"!==t.view.type))throw new n.default("location-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'")}return t}(e),a=t.layer.geometryType,p=await async function(e,t){let a=e.locationScheme,n=null,i=null;const o=await(0,s.Ib)(e.basemap,e.view);if(n=null!=o.basemapId?o.basemapId:null,i=null!=o.basemapTheme?o.basemapTheme:null,a)return{scheme:(0,u.cloneScheme)(a),basemapId:n,basemapTheme:i};const l=(0,u.getSchemes)({basemapTheme:i,geometryType:t,worldScale:!!e.symbolType?.includes("3d-volumetric"),view:e.view});return l&&(a=l.primaryScheme,n=l.basemapId,i=l.basemapTheme),{scheme:a,basemapId:n,basemapTheme:i}}(t,a),m=p.scheme;if(!m)throw new n.default("location-renderer:insufficient-info","Unable to find location scheme");const{view:f,layer:d,signal:h,filter:y}=t,[w,g]=await Promise.all([t.outlineOptimizationEnabled?(0,o.A)({view:f,layer:d,signal:h,filter:y}).catch(s.ou):null,t.sizeOptimizationEnabled?(0,l.default)({view:f,layer:d,signal:h,filter:y}).catch(s.ou):null]),v=w?.opacity,b=new i.default({symbol:(0,s.v5)(a,{type:t.symbolType,color:m.color,size:(0,s.N6)(m,a),outline:(0,s.qc)(m,a,v),meshInfo:{colorMixMode:t.colorMixMode,edgesType:t.edgesType}})});return w?.visualVariables.length&&(b.visualVariables=w.visualVariables.map((e=>e.clone()))),g?.minSize&&(b.visualVariables?b.visualVariables.push(g.minSize):b.visualVariables=[g.minSize]),{renderer:b,locationScheme:(0,u.cloneScheme)(m),basemapId:p.basemapId,basemapTheme:p.basemapTheme}}},80791:(e,t,a)=>{a.d(t,{_J:()=>c,_t:()=>r});var n=a(76931),i=a(42633);const o=i.Np.light,l=i.Np.dark;function s(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b}function r(e,t){let a=0;if(e.length===t.length){let n=e.every(((e,a)=>s(e,t[a])));n?a=1:(n=e.slice().reverse().every(((e,a)=>s(e,t[a]))),n&&(a=-1))}return a}function c(e,t){return Math.ceil(function(e){const t=e.width,a=e.height;let i=e.pixelSizeAt(e.toMap((0,n.tc)(.5*t,.5*a),{exclude:[]}));if(i<=0&&(i=e.pixelSizeAt(e.toMap((0,n.tc)(.5*t,.95*a),{exclude:[]})),i<=0&&"camera"in e)){const t=e.camera.position.clone();t.z=0,i=2*e.pixelSizeAt(t)}return i}(t)*(0,n.Lz)((0,n.cr)(e)))}}}]);
//# sourceMappingURL=80532.34a948f0.chunk.js.map