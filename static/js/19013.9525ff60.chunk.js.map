{"version":3,"file":"static/js/19013.9525ff60.chunk.js","mappings":"sUAI0Y,SAASA,EAAEC,GAAG,MAAMC,UAAUC,EAAEC,QAAQC,EAAEC,WAAWC,GAAGN,EAAEO,EAAED,EAAEA,EAAEE,KAAKR,GAAG,IAAIS,EAAAA,QAAET,EAAEC,aAAa,CAAC,IAAIQ,EAAAA,QAAEP,IAAI,OAAOK,EAAEG,KAAK,IAAID,EAAAA,QAAEH,EAAEA,EAAEA,EAAEK,OAAO,GAAGR,QAAQC,IAAIG,CAAC,CAAC,SAASK,IAAI,OAAOZ,EAAAA,GAAEa,QAAQJ,GAAG,mBAAmBA,EAAEK,KAAKN,KAAKC,IAAC,CAAIM,KAAKb,EAAAA,GAAEc,OAAOP,EAAEK,IAAIG,OAAOlB,EAAEU,MAAM,CAAC,SAASS,IAAI,OAAOhB,EAAAA,GAAEiB,WAAWN,QAAQJ,GAAG,mBAAmBA,GAAG,CAAC,SAASW,EAAEX,GAAG,MAAML,EAAEF,EAAAA,GAAEmB,SAASZ,GAAGH,EAAEN,EAAAA,GAAEa,QAAQJ,GAAG,mBAAmBA,EAAEK,KAAKQ,MAAMb,GAAGA,EAAEK,KAAKV,IAAI,OAAGE,EAAS,CAACS,KAAKN,EAAEQ,OAAOlB,EAAEO,IAAW,IAAI,CAAC,SAASiB,EAAEd,GAAG,MAAMQ,OAAOjB,EAAEwB,UAAUtB,EAAE,WAAWO,EAAE,GAAGT,EAAEW,OAAO,EAAE,OAAO,KAAK,GAAG,IAAIX,EAAEW,OAAO,OAAO,IAAIJ,EAAAA,QAAE,CAACiB,UAAUtB,EAAED,UAAUD,EAAE,GAAGG,QAAQH,EAAE,KAAK,MAAMI,EAAE,GAAG,IAAI,IAAIE,EAAE,EAAEA,EAAEN,EAAEW,OAAO,EAAEL,IAAIF,GAAGM,KAAK,IAAIH,EAAAA,QAAE,CAACiB,UAAUtB,EAAED,UAAUD,EAAEM,GAAGH,QAAQH,EAAEM,EAAE,MAAM,OAAO,IAAImB,EAAAA,QAAE,CAACpB,WAAWD,GAAG,CAAC,SAASsB,EAAEjB,GAAG,OAAOL,EAAAA,EAAAA,IAAEK,EAAE,CAAC,SAASkB,EAAElB,GAAG,MAAMT,GAAEM,EAAAA,EAAAA,IAAEG,GAAG,IAAIT,EAAE,OAAO,KAAK,mBAAmBA,EAAEc,KAAKd,EAAEc,GAAG,iBAAiBd,EAAE4B,UAAU5B,EAAE4B,UAAU,MAAMd,GAAGV,EAAEwB,SAASrB,GAAGP,EAAE,MAAM,CAACe,KAAKb,EAAAA,GAAEc,OAAOZ,GAAGwB,SAASrB,EAAE,C","sources":["../node_modules/@arcgis/core/smartMapping/raster/support/colorRamps.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport o from\"../../../Color.js\";import{predefinedJsonColorRamps as r,colorRampDict as t,getRFxArgColorRampValue as n,getColorRampId as e}from\"../../../renderers/support/colorRampUtils.js\";export{convertColorRampToColormap}from\"../../../renderers/support/colorRampUtils.js\";import l from\"../../../rest/support/AlgorithmicColorRamp.js\";import i from\"../../../rest/support/MultipartColorRamp.js\";function m(r){const{fromColor:t,toColor:n,colorRamps:e}=r,l=e?e.map((r=>new o(r.fromColor))):[new o(t)];return l.push(new o(e?e[e.length-1].toColor:n)),l}function s(){return r.filter((o=>\"white-to-black\"!==o.id)).map((o=>({name:t.toJSON(o.id),colors:m(o)})))}function u(){return t.jsonValues.filter((o=>\"White to Black\"!==o))}function c(o){const n=t.fromJSON(o),e=r.filter((o=>\"white-to-black\"!==o.id)).find((o=>o.id===n));if(e){return{name:o,colors:m(e)}}return null}function p(o){const{colors:r,algorithm:t=\"cie-lab\"}=o;if(r.length<2)return null;if(2===r.length)return new l({algorithm:t,fromColor:r[0],toColor:r[1]});const n=[];for(let e=0;e<r.length-1;e++)n?.push(new l({algorithm:t,fromColor:r[e],toColor:r[e+1]}));return new i({colorRamps:n})}function f(o){return n(o)}function a(o){const r=e(o);if(!r)return null;\"white-to-black\"===r.id&&(r.id=\"black-to-white\",r.inverted=!r.inverted);const{id:n,inverted:l}=r;return{name:t.toJSON(n),inverted:l}}export{s as all,c as byName,f as convertColorRampToRasterFunctionArgument,p as createColorRamp,a as getColorRampName,u as names};\n"],"names":["m","r","fromColor","t","toColor","n","colorRamps","e","l","map","o","push","length","s","filter","id","name","toJSON","colors","u","jsonValues","c","fromJSON","find","p","algorithm","i","f","a","inverted"],"sourceRoot":""}