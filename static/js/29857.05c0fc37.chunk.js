"use strict";(self.webpackChunktestapp=self.webpackChunktestapp||[]).push([[29857],{16525:(e,n,t)=>{t.d(n,{A:()=>r});var a=t(5262),i=t(27084);function s(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=[];if(n){for(const a of e)if(a.geometry){const e=a.geometry;t.push.apply(t,e.points)}}else t=e.map((e=>e.geometry));const i=[],s=[];let r=1/0,o=-1/0,l=0,c=0,f=0,u=0;for(const p of t){if(!p)continue;n?(i[0]=p[0],i[1]=p[1]):(i[0]=p.x,i[1]=p.y);let e=1/0,g=-1/0;for(const l of t){if(l===p)continue;if(!l)continue;n?(s[0]=l[0],s[1]=l[1]):(s[0]=l.x,s[1]=l.y);const t=(0,a.R3)(i,s);t>0&&(t<e&&(e=t),t<r&&(r=t),t>g&&(g=t),t>o&&(o=t))}e!==1/0&&(++f,l+=e),g!==-1/0&&(++u,c+=g)}return{minDistance:r!==1/0?r:null,maxDistance:o!==-1/0?o:null,avgMinDistance:f?l/f:null,avgMaxDistance:u?c/u:null}}function r(e){const{features:n}=e;let t=null;switch(e.geometryType){case"point":t=s(n);break;case"multipoint":t=s(n,!0);break;case"polyline":t=function(e){let n=0,t=0,i=1/0,s=-1/0;for(const r of e){const e=r.geometry;if(e){let r=0;for(const n of e.paths){const e=(0,a.Yl)(n);e>0&&(r+=e)}r>0&&(++n,t+=r,r<i&&(i=r),r>s&&(s=r))}}return{minLength:i!==1/0?i:null,maxLength:s!==-1/0?s:null,avgLength:n?t/n:null}}(n);break;case"polygon":t=function(e){let n=0,t=0,a=1/0,s=-1/0;for(const r of e){const e=r.geometry;if(e){const r=(0,i.v)(e);if(r){const e=Math.abs(r.xmax-r.xmin),i=Math.abs(r.ymax-r.ymin),o=Math.sqrt(e*i);o>0&&(++n,t+=o,o<a&&(a=o),o>s&&(s=o))}}}return{minSize:a!==1/0?a:null,maxSize:s!==-1/0?s:null,avgSize:n?t/n:null}}(n)}return Promise.resolve(t)}},29857:(e,n,t)=>{t.r(n),t.d(n,{default:()=>v});var a=t(50076),i=t(68002),s=t(16525),r=t(90494),o=t(11563);const l=500,c=1e8,f=1280,u=12,p=30,g=15;async function m(e){const{view:n,sampleSize:t}=e;if(!e||!e.layer)throw new a.default("scale-range:missing-parameters","'layer' parameter is required");if(e.snapToLOD&&!n)throw new a.default("scale-range:missing-parameters","'view' parameter is required when 'snapToLOD' is true");e.forBinning&&(0,r.p)(e,"scale-range");const{layer:i,...s}=e,c=e.forBinning?o.Mi:o.J4,f=(0,o.Jg)(i,c,e.forBinning);if(!f)throw new a.default("scale-range:invalid-parameters","'layer' must be one of these types: "+(0,o.Ho)(c).join(", "));const u={layerAdapter:f,...s};u.sampleSize=t||l,await(n?.when());const p=null!=u.signal?{signal:u.signal}:null;return await f.load(p),u}function y(e,n,t){const a=function(e,n){const t=u,a=f/4,i=p,s=f/4,r=g,o=f/2;let l=0,c=0,m=0,y=0;switch(e){case"point":case"multipoint":{const e=n;l=e.avgMinDistance??0,c=t,m=e.minDistance??0,y=a;break}case"polyline":{const e=n;l=e.avgLength??0,c=i,m=e.minLength??0,y=s;break}case"polygon":{const e=n;l=e.avgSize??0,c=r,m=e.minSize??0,y=o;break}}return{resolutionForMinScale:l>0?l/c:null,resolutionForMaxScale:m>0?m/y:null}}(e.geometryType,n),s=t?.spatialReference||e.layer.spatialReference;return{minScale:(0,i.gB)(a.resolutionForMinScale??0,s),maxScale:(0,i.gB)(a.resolutionForMaxScale??0,s)}}function w(e,n){let t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(e.constraints&&"effectiveLODs"in e.constraints){const a=e.constraints.effectiveLODs,i=t?a:a.slice().reverse();let s=null;for(const e of i)if(!(t?e.scale>n:e.scale<n)){s=e;break}return s}}function h(e,n,t,i){const{view:s,snapToLOD:r,layerAdapter:o}=e;if(r&&s){const e=w(s,n),a=w(s,t,!1);n=e?e.scale:n,t=a?a.scale:t}if(n<t)throw new a.default("scale-range:invalid","calculated minScale is less than maxScale.");return t>n/2&&(t=Math.floor(t/2)),n>c&&(n=0),"polygon"!==o.geometryType&&(t=0),{minScale:Math.ceil(n),maxScale:Math.floor(t),spatialStatistics:i}}async function v(e){const n=await m(e),{view:t,sampleSize:i,layerAdapter:r,signal:o,filter:l}=n,c=await r.getSampleFeatures({view:t,sampleSize:i,returnGeometry:!0,filter:l,signal:o},"json");if(!c?.length)throw new a.default("scale-range:insufficient-info","No features are available to calculate statistics");const f=await(0,s.A)({features:c,geometryType:r.geometryType}),{minScale:u,maxScale:p}=y(r,f,t);return h(n,u,p,f)}},90494:(e,n,t)=>{t.d(n,{p:()=>s,z:()=>i});var a=t(50076);const i="aggregateCount";function s(e,n){if(!e.view)throw new a.default(`${n}:missing-parameters`,"'view' parameter is required for binning");if(e.sqlExpression)throw new a.default(`${n}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if("3d"===e.view.type)throw new a.default(`${n}:invalid-parameters`,"3d view is not supported for binning")}}}]);
//# sourceMappingURL=29857.05c0fc37.chunk.js.map