{"version":3,"file":"static/js/58582.d9cc2385.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/views/2d/engine/webgl/collisions/BoundingBox.js","../node_modules/@arcgis/core/views/2d/engine/webgl/collisions/LabelMetric.js","../node_modules/@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js","../node_modules/@arcgis/core/views/webgl/ProgramTemplate.js","../node_modules/@arcgis/core/views/2d/engine/webgl/DisplayEntity.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js","../node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/DisplayRecord.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/util/serializationUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/dataViewUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/AFeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/Utils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js","../node_modules/@arcgis/core/views/2d/engine/brushes.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js","../node_modules/@arcgis/core/views/2d/engine/webgl/util/Reader.js","../node_modules/@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/number.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as t,create as h}from\"../../../../../core/libs/gl-matrix-2/factories/vec2f32.js\";class i{constructor(i,e,s,r){this.transformedX=0,this.transformedY=0,this.center=t(i,e),this.centerT=h(),this.halfWidth=s/2,this.halfHeight=r/2,this.width=s,this.height=r}get x(){return this.center[0]}get y(){return this.center[1]}get blX(){return this.center[0]+this.halfWidth}get blY(){return this.center[1]+this.halfHeight}get trX(){return this.center[0]-this.halfWidth}get trY(){return this.center[1]-this.halfHeight}get xmin(){return this.x-this.halfWidth}get xmax(){return this.x+this.halfWidth}get ymin(){return this.y-this.halfHeight}get ymax(){return this.y+this.halfHeight}set x(t){this.center[0]=t}set y(t){this.center[1]=t}clone(){return new i(this.x,this.y,this.width,this.height)}serialize(t){return t.writeF32(this.center[0]),t.writeF32(this.center[1]),t.push(this.width),t.push(this.height),t}findCollisionDelta(t,h=4){const i=Math.abs(t.centerT[0]-this.centerT[0]),e=Math.abs(t.centerT[1]-this.centerT[1]),s=(t.halfWidth+this.halfWidth+h)/i,r=(t.halfHeight+this.halfHeight+h)/e,n=Math.min(s,r);return Math.log2(n)}extend(t){const h=Math.min(this.xmin,t.xmin),i=Math.min(this.ymin,t.ymin),e=Math.max(this.xmax,t.xmax)-h,s=Math.max(this.ymax,t.ymax)-i,r=h+e/2,n=i+s/2;this.width=e,this.height=s,this.halfWidth=e/2,this.halfHeight=s/2,this.x=r,this.y=n}static deserialize(t){const h=t.readF32(),e=t.readF32(),s=t.readInt32(),r=t.readInt32();return new i(h,e,s,r)}}export{i as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"./BoundingBox.js\";import{serializeList as i,deserializeList as t}from\"../util/serializationUtils.js\";class r{constructor(e,i,t,r,s,n,o,a,h=[]){this.entityTexel=e,this.anchorX=i,this.anchorY=t,this.directionX=r,this.directionY=s,this.maxScale=n,this.minScale=o,this.referenceBounds=a,this.bounds=h}serialize(e){e.push(this.entityTexel),e.writeF32(this.anchorX),e.writeF32(this.anchorY),e.writeF32(this.directionX),e.writeF32(this.directionY),e.writeF32(this.maxScale),e.writeF32(this.minScale),null===this.referenceBounds?(e.writeF32(0),e.writeF32(0),e.writeF32(0)):(e.writeF32(this.referenceBounds.size),e.writeF32(this.referenceBounds.offsetX),e.writeF32(this.referenceBounds.offsetY)),i(e,this.bounds)}static deserialize(i){const s=i.readInt32(),n=i.readF32(),o=i.readF32(),a=i.readF32(),h=i.readF32(),d=i.readF32(),c=i.readF32(),F=i.readF32(),f=i.readF32(),l=i.readF32(),u=t(i,e)??[];return new r(s,n,o,a,h,d,c,{size:F,offsetX:f,offsetY:l},u)}}export{r as LabelMetric};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{Program as r}from\"./Program.js\";function e(e,t,a=\"\"){return new r(e,a+t.shaders.vertexShader,a+t.shaders.fragmentShader,t.attributes)}export{e as createProgram};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"./DisplayRecord.js\";import{serializeList as r,deserializeList as i}from\"./util/serializationUtils.js\";class s{constructor(t,r){this.id=t,this.sortKey=r,this.records=[]}serialize(t){return t.push(this.id),t.writeF32(this.sortKey),r(t,this.records),t}static deserialize(r){const e=r.readInt32(),o=r.readF32(),a=new s(e,o);return a.records=i(r,t)??[],a}}s.byteSizeHint=2*Uint32Array.BYTES_PER_ELEMENT+t.byteSizeHint;export{s as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int maxHighlightReasons = 6;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + maxHighlightReasons);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < maxHighlightReasons; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\n#if !defined(highlight_all)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nif (sizeValue >= values[VV_SIZE_N - 1]) {\\nreturn sizes[VV_SIZE_N - 1];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"common.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos * u_scale + u_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\nfloat maxI = 255.0;\\nfloat mid = 128.0;\\nfloat c = u_contrastOffset;\\nfloat b = u_brightnessOffset;\\nvec4 v;\\nif (c > 0.0 && c < 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n} else if (c <= 0.0 && c > -100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n} else if (c == 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\nv = (sign(v) + 1.0) / 2.0;\\n} else if (c == -100.0) {\\nv = vec4(mid, mid, mid, currentPixel.a);\\n}\\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\\nreturn vec4(rgb, currentPixel.a);\\n}\",\"getSurfaceValues.glsl\":\"#include <raster/common/mirror.glsl>\\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\\nvec2 onePixel = 1.0 / srcImageSize;\\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\\nvalues[0] = va.r;\\nvalues[1] = vb.r;\\nvalues[2] = vc.r;\\nvalues[3] = vd.r;\\nvalues[4] = ve.r;\\nvalues[5] = vf.r;\\nvalues[6] = vg.r;\\nvalues[7] = vh.r;\\nvalues[8] = vi.r;\\nvalues[9] = alpha;\\n}\",\"inverse.glsl\":\"float invertValue(float value) {\\nfloat s = sign(value);\\nreturn (s * s) / (value + abs(s) - 1.0);\\n}\",\"mirror.glsl\":\"vec2 mirror(vec2 pos) {\\nvec2 pos1 = abs(pos);\\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\nuniform float u_scaling;\\n#include <raster/lut/colorize.glsl>\\n#include <raster/common/getSurfaceValues.glsl>\\nvec3 rgb2hsv(vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\nvec3 hsv = rgb2hsv(rgb.xyz);\\nhsv.z = hillshade;\\nreturn vec4(hsv2rgb(hsv) * u_scaling, 1.0) * rgb.a;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nif (currentPixel.a == 0.0) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nfloat pv[10];\\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\nfloat hillshade = 0.0;\\nif (u_hillshadeType == 0){\\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\\nif (z < 0.0)  z = 0.0;\\nhillshade = z;\\n} else {\\nfor (int k = 0; k < 6; k++) {\\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\\nif (z < 0.0) z = 0.0;\\nhillshade = hillshade + z * u_weights[k];\\nif (k == 5) break;\\n}\\n}\\n#ifdef APPLY_COLORMAP\\nvec4 result = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\nhillshade *= u_scaling;\\nvec4 result = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = vec4(floor(result.xyz + 0.5), result.a);\\n#endif\\ngl_FragColor = result;\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\nvec4 color = texture2D(u_colormap, clrPosition);\\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\\nreturn result;\\n}\\nvec4 colorizeNoClamp(vec4 currentPixel, float scaleFactor) {\\nfloat value = currentPixel.r * scaleFactor - u_colormapOffset;\\nvec4 result = colorize(currentPixel, scaleFactor);\\nreturn result * step(0.0, value) * step(value, u_colormapMaxIndex);\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nvec4 result = colorizeNoClamp(currentPixel, 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},rfx:{aspect:{\"aspect.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nconst float pi = 3.14159265359;\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\\nalpha *= sign(abs(dzx) + abs(dzy));\\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\\nfloat aspect = aspect_rad * 180.0 / pi;\\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\\n}\"},bandarithmetic:{\"bandarithmetic.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nuniform float u_adjustments[3];\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index;\\n#ifdef NDXI\\nindex = (nir - red) * invertValue(nir + red);\\n#elif defined(SR)\\nindex = nir * invertValue(red);\\n#elif defined(CI)\\nindex = nir * invertValue(red) - 1.0;\\n#elif defined(SAVI)\\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\\n#elif defined(TSAVI)\\nfloat s = u_adjustments[0];\\nfloat a = u_adjustments[1];\\nfloat x = u_adjustments[2];\\nfloat y = -a * s + x * (1.0 + s * s);\\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\\n#elif defined(MSAVI)\\nfloat nir2 = 2.0 * nir + 1.0;\\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\\n#elif defined(GEMI)\\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\\n#elif defined(PVI)\\nfloat a = u_adjustments[0];\\nfloat b = u_adjustments[1];\\nfloat y = sqrt(1.0 + a * a);\\nindex = (nir - a * red - b) * invertValue(y);\\n#elif defined(VARI)\\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\\n#elif defined(MTVI)\\nfloat green = pv2.b;\\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\\n#elif defined(RTVICORE)\\nfloat green = pv2.b;\\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\\n#elif defined(EVI)\\nfloat blue = pv2.b;\\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\\nindex =  (2.5 * (nir - red)) * invertValue(denom);\\n#elif defined(WNDWI)\\nfloat g = pv2.r;\\nfloat n = pv2.g;\\nfloat s = pv2.b;\\nfloat a = u_adjustments[0];\\nfloat denom = g + a * n + (1.0 - a) * s;\\nindex = (g - a * n - (1.0 - a) * s) * invertValue(denom);\\n#elif defined(BAI)\\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\\n#else\\ngl_FragColor = pv;\\nreturn;\\n#endif\\n#ifdef ROUND_OUTPUT\\nindex = floor(index + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},colormap2rgb:{\"colormap2rgb.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = colorizeNoClamp(vec4(pv.r, pv.r, pv.r, 1.0), 1.0);\\ngl_FragColor = vec4(result.xyz * 255.0, 1.0) * result.a * pv.a;\\n}\"},compositeband:{\"compositeband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\nuniform sampler2D u_image2;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\nfloat alpha = pv0.a;\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\nalpha *= pv1.a;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\nalpha = alpha * pv1.a * pv2.a;\\n#endif\\ngl_FragColor = vec4(a, b, c, alpha);\\n}\"},computechange:{\"computechange.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef DIFFERENCE\\nresult = a - b;\\n#elif defined(RELATIVE)\\nresult = (a - b) * invertValue(max(abs(a), abs(b)));\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},contrast:{\"contrast.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/common/contrastBrightness.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = adjustContrastBrightness(pv, false);\\ngl_FragColor = vec4(floor(result.rgb * 255.0 + 0.5), result.a);\\n}\"},convolution:{\"convolution.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\nuniform float u_kernel[25];\\n#include <raster/common/mirror.glsl>\\nvoid main() {\\nvec3 rgb = vec3(0.0, 0.0, 0.0);\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat alpha = 1.0;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\\nalpha *= pv.a;\\n}\\n}\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},curvature:{\"curvature.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform float u_zlFactor;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\\nfloat curvature = 0.0;\\n#ifdef STANDARD\\ncurvature = -u_zlFactor * (d + e);\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n#else\\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\\nfloat g = (-pv[3] + pv[5]) / 2.0;\\nfloat h = (pv[1] - pv[7]) / 2.0;\\nfloat g2 = g * g;\\nfloat h2 = h * h;\\n#ifdef PROFILE\\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\\n#else\\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\\n#endif\\n#endif\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n}\"},extractband:{\"extractband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\ngl_FragColor = vec4(pv2, pv.a);\\n}\"},focalstatistics:{\"focalstatistics.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\n#include <raster/common/mirror.glsl>\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat count = 0.0;\\n#ifdef STDDEV\\nvec3 sum = vec3(0.0, 0.0, 0.0);\\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\\n#endif\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nvec3 rgb = currentPixel.rgb;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\ncount += pv.a;\\n#ifdef MIN\\nrgb = min(rgb, pv.rgb);\\n#elif defined(MAX)\\nrgb = max(rgb, pv.rgb);\\n#elif defined(MEAN)\\nrgb += pv.rgb;\\n#elif defined(STDDEV)\\nsum += pv.rgb;\\nsum2 += (pv.rgb * pv.rgb);\\n#endif\\n}\\n}\\n#ifdef MEAN\\nrgb *= invertValue(count);\\n#elif defined(STDDEV)\\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\\n#endif\\nfloat alpha = step(0.9999, count);\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\n#ifdef FILL\\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\\n#endif\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},grayscale:{\"grayscale.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec3 u_weights;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat value = dot(u_weights, pv.rgb);\\ngl_FragColor = vec4(value, value, value, pv.a);\\n}\"},local:{\"local.frag\":\"precision highp float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef TWO_IMAGES\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\n#elif defined(CONDITIONAL)\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\n#endif\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef PLUS\\nresult = a + b;\\n#elif defined(MINUS)\\nresult = a - b;\\n#elif defined(TIMES)\\nresult = a * b;\\n#elif defined(DIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOATDIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOORDIVIDE)\\nresult = floor(a * invertValue(b));\\nalpha *= float(abs(sign(b)));\\n#elif defined(SQUARE)\\nresult = a * a;\\n#elif defined(SQRT)\\nresult = sqrt(a);\\n#elif defined(POWER)\\nresult = pow(a, b);\\n#elif defined(LN)\\nresult = a <= 0.0 ? 0.0: log(a);\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_1_0)\\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_2)\\nresult = a <= 0.0 ? 0.0: log2(a);\\nalpha *= float(a > 0.0);\\n#elif defined(EXP)\\nresult = exp(a);\\n#elif defined(EXP_1_0)\\nresult = pow(10.0, a);\\n#elif defined(EXP_2)\\nresult = pow(2.0, a);\\n#elif defined(ROUNDDOWN)\\nresult = floor(a);\\n#elif defined(ROUNDUP)\\nresult = ceil(a);\\n#elif defined(INT)\\nresult = float(sign(a)) * floor(abs(a));\\n#elif defined(MOD)\\nresult = mod(a, b);\\n#elif defined(NEGATE)\\nresult = -a;\\n#elif defined(ABS)\\nresult = abs(a);\\n#elif defined(ACOS)\\nresult = abs(a) > 1.0 ? 0.0: acos(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ACOSH)\\nresult = acosh(a);\\n#elif defined(ASIN)\\nresult = abs(a) > 1.0 ? 0.0: asin(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ASINH)\\nresult = asinh(a);\\n#elif defined(ATAN)\\nresult = atan(a);\\n#elif defined(ATANH)\\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\\nalpha *= step(abs(a), 1.0);\\n#elif defined(ATAN_2)\\nresult = atan(a, b);\\n#elif defined(COS)\\nresult = cos(a);\\n#elif defined(COSH)\\nresult = cosh(a);\\n#elif defined(SIN)\\nresult = sin(a);\\n#elif defined(SINH)\\nresult = sinh(a);\\n#elif defined(TAN)\\nresult = tan(a);\\n#elif defined(TANH)\\nresult = tanh(a);\\n#elif defined(BITWISEAND)\\nresult = float(int(a) & int(b));\\n#elif defined(BITWISEOR)\\nresult = float(int(a) | int(b));\\n#elif defined(BITWISELEFTSHIFT)\\nresult = float(int(a) << int(b));\\n#elif defined(BITWISERIGHTSHIFT)\\nresult = float(int(a) >> int(b));\\n#elif defined(BITWISENOT)\\nresult = float(~(int(a)));\\n#elif defined(BITWISEXOR)\\nresult = float(int(a) ^ int(b));\\n#elif defined(BOOLEANAND)\\nresult = float((a != 0.0) && (b != 0.0));\\n#elif defined(BOOLEANNOT)\\nresult = float(a == 0.0);\\n#elif defined(BOOLEANOR)\\nresult = float((a != 0.0) || (b != 0.0));\\n#elif defined(BOOLEANXOR)\\nresult = float((a != 0.0) ^^ (b != 0.0));\\n#elif defined(GREATERTHAN)\\nresult = float(a > b);\\n#elif defined(GREATERTHANEQUAL)\\nresult = float(a >= b);\\n#elif defined(LESSTHAN)\\nresult = float(a < b);\\n#elif defined(LESSTHANEQUAL)\\nresult = float(a <= b);\\n#elif defined(EQUALTO)\\nresult = float(a == b);\\n#elif defined(NOTEQUAL)\\nresult = float(a != b);\\n#elif defined(ISNULL)\\nresult = float(alpha == 0.0);\\nalpha = 1.0;\\n#elif defined(SETNULL)\\nfloat maskValue = float(a == 0.0);\\nresult = maskValue * b;\\nalpha *= maskValue;\\n#elif defined(CONDITIONAL)\\nfloat weight = float(abs(sign(a)));\\nresult = weight * b + (1.0 - weight) * c;\\n#endif\\nfloat rangeFactor = step(u_domainRange.s, result) * step(result, u_domainRange.t);\\nresult *= rangeFactor;\\nalpha *= rangeFactor;\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},mask:{\"mask.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_INCLUDED_RANGES 6\\n#define LEN_NODATA_VALUES 6\\nuniform highp float u_includedRanges[6];\\nuniform highp float u_noDataValues[6];\\nfloat maskFactor(float bandValue, float fromValue, float to) {\\nfloat factor = 1.0;\\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\\nfactor *= float(u_noDataValues[i] != bandValue);\\n}\\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\\nreturn factor;\\n}\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\\n#ifdef MULTI_BAND\\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\\nfloat maskFactor = redFactor * greenFactor * blueFactor;\\ngl_FragColor = pv * maskFactor;\\n#else\\ngl_FragColor = pv * redFactor;\\n#endif\\n}\"},ndvi:{\"ndvi.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index = (nir - red) * invertValue(nir + red);\\n#ifdef SCALED\\nindex = floor((index + 1.0) * 100.0 + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},remap:{\"remap.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_REMAP_RANGES 18\\n#define LEN_NODATA_RANGES 12\\nuniform highp float u_rangeMaps[18];\\nuniform highp float u_noDataRanges[12];\\nuniform highp float u_unmatchMask;\\nuniform vec2 u_clampRange;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat factor = 1.0;\\nfloat bandValue = pv.r;\\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\\nfactor *= inside;\\n}\\nfloat mapValue = 0.0;\\nfloat includeMask = 0.0;\\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\\n}\\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\\n}\"},slope:{\"slope.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform float u_zFactor;\\nuniform vec2 u_srcImageSize;\\nuniform float u_pixelSizePower;\\nuniform float u_pixelSizeFactor;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\\n#ifdef PERCENT_RISE\\nfloat result = rise2run * 100.0;\\n#else\\nfloat result = atan(rise2run) * 57.2957795;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying highp vec2 v_texcoord;\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\\nval = clamp(val, minCutOff, maxCutOff);\\nfloat stretchedVal;\\n#ifdef USE_GAMMA\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\\n#else\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n#endif\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\\n#ifdef MULTI_BAND\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\\n#else\\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\\n#endif\\n}\"},vs:{\"vs.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\nif (val >= maxCutOff) {\\nreturn maxOutput;\\n} else if (val <= minCutOff) {\\nreturn minOutput;\\n}\\nfloat stretchedVal;\\nif (useGamma) {\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\nif (gamma > 1.0) {\\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n}\\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n} else {\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n}\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\nreturn;\\n#endif\\nif (u_bandCount == 1) {\\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n} else {\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n}\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as n}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as o}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h,DataType as u}from\"../../../webgl/enums.js\";const l=r=>{switch(r.BYTES_PER_ELEMENT){case 1:return u.UNSIGNED_BYTE;case 2:return u.UNSIGNED_SHORT;case 4:return u.UNSIGNED_INT;default:throw new e(\"Cannot get DataType of array\")}},y=(e,r,t,n)=>{let o=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],n=e[2*(r+s-1)+1];o+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+n)}return n?o>0:o<0},g=({coords:e,lengths:r},n)=>{const o=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&y(e,i+r[s],r[s+1],n);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)o.push(e+c)}return o};class p{constructor(e,r,t,n=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=n}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,n=new Uint32Array(g(r,!0)),o=new Uint32Array(t.length/2);for(let s=0;s<o.length;s++)o[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new p({geometry:o},n,m.TRIANGLES)}static fromGeometry(t,n){const o=n.geometry?.type;switch(o){case\"polygon\":return p.fromPolygon(t,n.geometry);case\"extent\":return p.fromMapExtent(t,n.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,n)),p.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(g(t,!1)),h=new Uint32Array(s.length/2),u=o(),l=o();for(let o=0;o<h.length;o++)n(u,s[2*o],s[2*o+1]),e.toScreen(l,u),h[o]=a(Math.floor(l[0]),Math.floor(l[1]));return new p({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:n}){const o={geometry:new Uint32Array([a(e,t),a(r,t),a(e,n),a(e,n),a(r,t),a(r,n)])},s=new Uint32Array([0,1,2,3,4,5]);return new p(o,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,n]=e.toScreen([0,0],[r.xmin,r.ymin]),[o,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,n),a(o,n),a(t,s),a(t,s),a(o,n),a(o,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new p(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers?.forEach((e=>e?.dispose())),this._cache.indexBuffer=this._cache.vertexBuffers=null}get elementType(){return l(this.indices)}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer??=f.createIndex(e,r,this.indices),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers??=new Map(Object.keys(this.vertices).reduce(((t,n)=>(t.push([n,f.createVertex(e,r,this.vertices[n])]),t)),new Array)),this._cache.vertexBuffers}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t,e,s,r,i,h,n){this.instanceId=t,this.textureKey=e,this.indexStart=s,this.indexCount=r,this.vertexStart=i,this.vertexCount=h,this.overlaps=n}updateBaseOffsets(t){this.vertexStart+=t.vertexFrom,this.indexStart+=t.indexFrom}clone(){return new t(this.instanceId,this.textureKey,this.indexStart,this.indexCount,this.vertexStart,this.vertexCount,this.overlaps)}static write(t,e,s,r,i,h,n,a){t.push(e),t.push(s),t.push(r),t.push(i),t.push(h),t.push(n),t.push(a)}serialize(t){return t.push(this.instanceId),t.push(this.textureKey),t.push(this.indexStart),t.push(this.indexCount),t.push(this.vertexStart),t.push(this.vertexCount),t.push(this.overlaps),t}static deserialize(e){const s=e.readInt32(),r=e.readInt32(),i=e.readInt32(),h=e.readInt32(),n=e.readInt32(),a=e.readInt32(),u=e.readInt32();return new t(s,r,i,h,n,a,u)}}t.byteSizeHint=7*Uint32Array.BYTES_PER_ELEMENT;export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as a,PrimitiveType as l,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(l.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(l.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),a=new Int8Array([0,0,1,0,1,1,0,1]),l=n.createVertex(e,f.STATIC_DRAW,a),m=new g(e,i.attributes,t,new Map([[\"geometry\",l]])),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,new Map([[\"geometry\",d]]));this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:a,bytesReserved:l}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",a>0||l>0){const e=`Memory usage: ${a} of ${l} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let t=0;return this._head.forEach((a=>{const e=a.end-a.start;t=Math.max(t,e)})),t}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,d=r.next;for(;d;){if(d.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===d.data.start){const t=d.data.end-d.data.start;return r.data.end+=t,void(r.next=d.next)}return}if(d.data.start===n)return void(d.data.start-=e);const s=new t({start:a,end:n});return s.next=r.next,void(r.next=s)}r=d,d=d.next}if(a===r.data.end)return void(r.data.end+=e);const s=new t({start:a,end:n});r.next=s}clear(){this._head=null}}export{a as FreeList,t as List};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nfunction e(e,n){if(null!==n){e.push(n.length);for(const r of n)r.serialize(e);return e}e.push(0)}function n(e,n,r){const t=e.readInt32(),o=new Array(t);for(let i=0;i<o.length;i++)o[i]=n.deserialize(e,r);return o}export{n as deserializeList,e as serializeList};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{toUint16 as t,fromUint16 as e}from\"../../../number.js\";import{DataType as n}from\"../../../../../../webgl/enums.js\";function o(e,o,s,f){const r=s.packPrecisionFactor??1;switch(s.type){case n.BYTE:if(1===s.count)e.setInt8(f+s.offset,o*r);else for(let t=0;t<s.count;t++){const n=t*Int8Array.BYTES_PER_ELEMENT;e.setInt8(f+s.offset+n,o[t]*r)}break;case n.UNSIGNED_BYTE:if(1===s.count)e.setUint8(f+s.offset,o*r);else for(let t=0;t<s.count;t++){const n=t*Uint8Array.BYTES_PER_ELEMENT;e.setUint8(f+s.offset+n,o[t]*r)}break;case n.SHORT:if(1===s.count)e.setInt16(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Int16Array.BYTES_PER_ELEMENT;e.setInt16(f+s.offset+n,o[t]*r,!0)}break;case n.UNSIGNED_SHORT:if(1===s.count)e.setUint16(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(f+s.offset+n,o[t]*r,!0)}break;case n.INT:if(1===s.count)e.setInt32(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Int32Array.BYTES_PER_ELEMENT;e.setInt32(f+s.offset+n,o[t]*r,!0)}break;case n.UNSIGNED_INT:if(1===s.count)e.setUint32(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Uint32Array.BYTES_PER_ELEMENT;e.setUint32(f+s.offset+n,o[t]*r,!0)}break;case n.FLOAT:if(1===s.count)e.setFloat32(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Float32Array.BYTES_PER_ELEMENT;e.setFloat32(f+s.offset+n,o[t]*r,!0)}break;case n.HALF_FLOAT:if(1===s.count)e.setUint16(f+s.offset,t(o*r),!0);else for(let n=0;n<s.count;n++){const E=n*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(f+s.offset+E,t(o[n]*r),!0)}}}function s(t,o,s){switch(o.type){case n.BYTE:{if(1===o.count)return t.getInt8(s+o.offset);const e=[];for(let n=0;n<o.count;n++){const f=n*Int8Array.BYTES_PER_ELEMENT;e.push(t.getInt8(s+o.offset+f))}return e}case n.UNSIGNED_BYTE:{if(1===o.count)return t.getUint8(s+o.offset);const e=[];for(let n=0;n<o.count;n++){const f=n*Uint8Array.BYTES_PER_ELEMENT;e.push(t.getUint8(s+o.offset+f))}return e}case n.SHORT:{if(1===o.count)return t.getInt16(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Int16Array.BYTES_PER_ELEMENT;e.push(t.getInt16(s+o.offset+f,!0))}return e}case n.UNSIGNED_SHORT:{if(1===o.count)return t.getUint16(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Uint16Array.BYTES_PER_ELEMENT;e.push(t.getUint16(s+o.offset+f,!0))}return e}case n.INT:{if(1===o.count)return t.getInt32(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Int32Array.BYTES_PER_ELEMENT;e.push(t.getInt32(s+o.offset+f,!0))}return e}case n.UNSIGNED_INT:{if(1===o.count)return t.getUint32(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Uint32Array.BYTES_PER_ELEMENT;e.push(t.getUint32(s+o.offset+f,!0))}return e}case n.FLOAT:{if(1===o.count)return t.getFloat32(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Float32Array.BYTES_PER_ELEMENT;e.push(t.getFloat32(s+o.offset+f,!0))}return e}case n.HALF_FLOAT:{if(1===o.count)return e(t.getUint16(s+o.offset,!0));const n=[];for(let f=0;f<o.count;f++){const r=f*Uint16Array.BYTES_PER_ELEMENT;n.push(e(t.getUint16(s+o.offset+r,!0)))}return n}}}export{o as packDataView,s as unpackDataView};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as r}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as i,multiply as e,invert as o}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as a}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{i as m,q as n}from\"../../../../chunks/vec32.js\";import{create as l}from\"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";import{tileSize as c}from\"./definitions.js\";import{TiledDisplayObject as h}from\"./TiledDisplayObject.js\";const f=a(),p=l();class d extends h{constructor(t,s,r,i){super(t,s,r,i,c,c)}destroy(){super.destroy()}setTransform(o){const a=this.resolution/o.resolution,m=this.transforms.tileMat3,[n,l]=o.toScreenNoRotation([0,0],[this.x,this.y]),c=this.width/this.rangeX*a,h=this.height/this.rangeY*a;i(m,c,0,0,0,h,0,n,l,1),e(this.transforms.displayViewScreenMat3,o.displayViewMat3,m);const f=t(r(),c,0,0,h,n,l);s(this.transforms.labelMat2d,o.viewMat2d,f)}_createTransforms(){return{labelMat2d:r(),tileMat3:a(),displayViewScreenMat3:a()}}containsScreenPoint(t,s,r){const i=e(f,t.viewMat3,this.transforms.tileMat3),a=o(f,i);if(null==a)return!0;m(p,...s,1);const l=n(p,p,a),c=r*(this.resolution/t.resolution);return l[0]>=-c&&l[0]<this.width+c&&l[1]>=-c&&l[1]<this.height+c}}export{d as AFeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{PixelType as r}from\"../../../webgl/enums.js\";import{getDataTypeBytes as n}from\"../../../webgl/getDataTypeBytes.js\";import{VertexElementDescriptor as s}from\"../../../webgl/VertexElementDescriptor.js\";const a=()=>t.getLogger(\"esri.views.2d.engine.webgl.Utils\");function o(t){switch(t){case r.UNSIGNED_BYTE:return 1;case r.UNSIGNED_SHORT_4_4_4_4:return 2;case r.FLOAT:return 4;default:return void a().error(new e(\"webgl-utils\",`Unable to handle type ${t}`))}}function i(t){switch(t){case r.UNSIGNED_BYTE:return Uint8Array;case r.UNSIGNED_SHORT_4_4_4_4:return Uint16Array;case r.FLOAT:return Float32Array;default:return void a().error(new e(\"webgl-utils\",`Unable to handle type ${t}`))}}function c(e){const t=new Map;for(const r in e){const a=e[r];let o=0;t.set(r,a.map((e=>{const t=new s(e.name,e.count,e.type,o,0,e.normalized||!1);return o+=e.count*n(e.type),t}))),t.get(r).forEach((e=>e.stride=o))}return t}const l=e=>{const t=new Map;for(const r in e)for(const n of e[r])t.set(n.name,n.location);return t},u=e=>{const t={};return e.forEach(((e,r)=>t[r]=e?.length?e[0].stride:0)),t},m=new Map,$=(e,t)=>{if(!m.has(e)){const r=c(t),n={strides:u(r),bufferLayouts:r,attributes:l(t)};m.set(e,n)}return m.get(e)},f=e=>e.includes(\"data:image/svg+xml\");function d(e){const t=[];for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));return t}const g=e=>!!e&&(e=e.trim(),!!(/^[mzlhvcsqta]\\s*[-+.0-9][^mlhvzcsqta]+/i.test(e)&&/[\\dz]$/i.test(e)&&e.length>4));function p(e){if(null==e)return\"\";const{type:t}=e;switch(t){case\"CIMMarkerPlacementAlongLineRandomSize\":return`${t}-${e.seed}-${e.randomization}`;case\"CIMMarkerPlacementAlongLineVariableSize\":return`${t}-${e.maxRandomOffset}-${e.numberOfSizes}-${e.seed}-${e.variationMethod}`;case\"CIMMarkerPlacementAtExtremities\":return`${t}-${e.extremityPlacement}-${e.offsetAlongLine}`;case\"CIMMarkerPlacementAtRatioPositions\":return`${t}-${e.beginPosition}-${e.endPosition}-${e.flipFirst}-${JSON.stringify(e.positionArray)}`;case\"CIMMarkerPlacementAtMeasuredUnits\":return`${t}-${e.interval}-${e.skipMarkerRate}-${e.placeAtExtremities}`;case\"CIMMarkerPlacementInsidePolygon\":return`${t}-${e.stepX}-${e.stepY}-${e.randomness}-${e.gridType}-${e.seed}-${e.shiftOddRows}`;case\"CIMMarkerPlacementOnLine\":return`${t}-${e.relativeTo}-${e.startPointOffset}`;case\"CIMMarkerPlacementOnVertices\":return`${t}-${e.placeOnControlPoints}-${e.placeOnEndPoints}-${e.placeOnRegularVertices}`;case\"CIMMarkerPlacementPolygonCenter\":return`${t}-${e.method}`;default:return`${t}`}}export{d as charCodes,c as createAttributeLayout,$ as createProgramDescriptor,p as getCIMMarkerPlacementHash,i as getPixelArrayCtor,o as getPixelBytes,f as isSVGImage,g as isValidSVG};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushClip.js\";import s from\"./webgl/brushes/WGLBrushStencil.js\";import e from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as l}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as o}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as b}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as i}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as u}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const m={clip:r,stencil:s,tileDebugInfo:e,vtlBackground:l,vtlFill:b,vtlLine:i,vtlCircle:o,vtlSymbol:u};export{m as brushes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,new Map([[\"geometry\",a]]));return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";import{isHittest as i}from\"./shaderGraph/techniques/featureTechniqueUtils.js\";import{PrimitiveType as a,DataType as s}from\"../../../webgl/enums.js\";function r(t,e){return t<<16|255&e}function d(t){return 255&t}class h{constructor(t,e,n,i,a){this.instance=t,this.materialKey=e,this.target=n,this.start=i,this.count=a}get textureKey(){return d(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const t=this.instance.instanceId;return this.target.getMesh(t).getAttributePrecisionPackFactors()}draw(t,e){i(t)?this.drawCompute(t.context,e):this.drawGeometry(t.context,e)}drawCompute(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;t.bindVAO(i),t.drawElements(a.POINTS,this.count/3,s.UNSIGNED_INT,r),t.bindVAO(null)}drawGeometry(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT;t.bindVAO(i),t.drawElements(a.TRIANGLES,this.count,s.UNSIGNED_INT,r),t.bindVAO(null)}}class l{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const a=new l;for(const s of t.values())for(const t of s.records){const s=n.getInstance(t.instanceId),d=r(s.instanceId,t.textureKey);a.addRecord(s,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return a}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t,e){const{drawPhase:n}=t;for(const i of this.infos()){const a=i.instance.techniqueRef;a.drawPhase&n&&(null==e||a.type===e)&&i.render(t)}}addRecord(i,a,s,r,d,l,o,c){let u=s,_=r;if(_||(u=d,_=l),!_)return;if(null==this._head){const t=new h(i,a,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(i,a,o,u,_,this._tail,null);let g=null,m=this._head;const f=i.instanceId,E=i.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(E===e.MARKER||E===e.TEXT))return this._insert(i,a,o,u,_,this._tail,null);for(;m;){const t=m.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=g?.data.instance.instanceId;if(E<n||f===s&&f!==e)return this._insert(i,a,o,u,_,g,m);g=m,m=m.next}this._insert(i,a,o,u,_,g,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,i,a,s,r,d){if(null==r&&null==d){const r=new h(t,e,i,a,s);return this._head=new n(r),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==r&&null!=d?this._insertAtHead(t,e,i,a,s,d):null!=r&&null==d?this._insertAtEnd(t,e,i,a,s,r):null!=r&&null!=d?this._insertAtMiddle(t,e,i,a,s,r,d):void 0}_insertAtHead(t,e,i,a,s,r){const d=a+s;if(e===r.data.materialKey&&i===r.data.target&&d===r.data.start)r.data.start=a,r.data.count+=s;else{const d=new h(t,e,i,a,s);this._head=new n(d),this._head.next=r,this._length++}}_insertAtEnd(t,e,i,a,s,r){if(r.data.materialKey===e&&r.data.indexEnd===a)r.data.count+=s;else{const d=new h(t,e,i,a,s);this._tail=new n(d),r.next=this._tail,this._length++}}_insertAtMiddle(t,e,i,a,s,r,d){const l=a+s;if(r.data.materialKey===e&&r.data.target===i&&r.data.indexEnd===a)r.data.count+=s,r.data.materialKey===d.data.materialKey&&r.data.target===d.data.target&&r.data.indexEnd===d.data.start&&(r.data.count+=d.data.count,r.next=d.next,this._length--);else if(e===d.data.materialKey&&i===d.data.target&&l===d.data.start)d.data.start=a,d.data.count+=s;else{const l=new h(t,e,i,a,s),o=new n(l);r.next=o,o.next=d,this._length++}}}export{l as DisplayList,h as DisplayListInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{PooledUint32Array as i}from\"../PooledUint32Array.js\";import{FreeList as e}from\"./FreeList.js\";import{BufferObject as r}from\"../../../../webgl/BufferObject.js\";import{Usage as s}from\"../../../../webgl/enums.js\";const n=1.25,h=32767,a=h<<16|h;class d{constructor(t,e,r,s){this._pool=s;const n=i.create(e*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=e,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:e*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new e({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,e=Math.round((i+t)*n),r=e*this.strideInt;this._cpu.expand(r*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,e-i),this.memoryStats.bytesReserved+=(e-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,e,r,s){const n=r*this.strideInt;if(!n)return 0;const h=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(r);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,e,r,s,n){const h=r*this.strideInt;if(!h)return 0;const a=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(r);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=a;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,e){if(0===e.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=i.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const i of e)if(n||i.srcFrom!==i.dstFrom||0!==i.mutate){this.dirty.start=Math.min(this.dirty.start,i.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(i.dstFrom+i.count)*this.strideInt);for(let t=0;t<i.count;t++){const e=(i.dstFrom+t)*this.strideInt,r=(i.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[e+t]=h.array[r+t]+i.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=s.DYNAMIC_DRAW;return\"index\"===this.bufferType?r.createIndex(t,i,this._cpu.array):r.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=s.DYNAMIC_DRAW,e=new Uint32Array(this.fillPointer/3);for(let r=0;r<this.fillPointer;r+=3)e[r/3]=this._cpu.array[r];return r.createIndex(t,i,e)}}export{d as MappedBuffer};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as r}from\"./Buffer.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{PrimitiveType as s}from\"../../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../../webgl/VertexArrayObject.js\";const f=1e3;function n(e,t){const r=e.attributes.filter((e=>t.locations.has(e.name))).map((t=>({name:t.name,type:t.type,count:t.count,divisor:0,normalized:t.normalized??!1,offset:t.offset,stride:e.stride})));return new Map([[\"geometry\",r]])}function u(e,t){const r=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of i){r.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});const i=t.computeAttributeMap[s.name];null!=i&&2===i.length&&(r.push({name:i[0],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+e.stride,stride:e.stride}),r.push({name:i[1],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+2*e.stride,stride:e.stride}))}return new Map([[\"geometry\",r]])}class a{constructor(e,t){if(this._bufferPool=e,this._layout=t,this._invalidatedGeometry=!1,this._invalidatedCompute=!1,this._position=this._layout.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\")}destroy(){this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,r,i){return i?{primitive:s.POINTS,count:t/3,offset:r/3}:{primitive:e,count:t,offset:r}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1,t){if(!this._vertexBuffer)return null;const r=this._layout,s=r.stride,o=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),f=[];if(e)if(null==t)console.log(\"must provide location info to see compute attributes\");else for(const i of r.attributes){const e=t.computeAttributeMap[i.name];null!=e&&2===e.length&&(f.push({...i,name:e[0],offset:i.offset+s}),f.push({...i,name:e[1],offset:i.offset+2*s}))}const n=new DataView(o.slice().buffer);let u=o.byteLength/s;e&&(u=this._indexBuffer.fillPointer/3);const a=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let h=0;const d=[];for(let m=0;m<u;m++){if(e){h=a[3*m]*s}const t={};for(const e of[...r.attributes,...f]){let r=`${e.offset} ${e.name}`,s=i(n,e,h);if(e.packPrecisionFactor)if(r+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof s)s/=e.packPrecisionFactor;else for(let t=0;t<s.length;t++)s[t]/=e.packPrecisionFactor;t[r]=s}h+=s,d.push(t)}return{vertices:d,layout:r}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,1e3)),this._vertexBuffer.ensure(Math.max(t,1e3));else{const i=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new r(\"index\",Math.max(e,f),1,this._bufferPool),this._vertexBuffer=new r(\"vertex\",Math.max(t,f),i,this._bufferPool)}}append(e){const t=e.layout.stride,r=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(r,i);const{vertices:s,indices:o}=e,f=this._vertexBuffer.insert(s,0,s.byteLength/t,0);return{vertexFrom:f,indexFrom:this._indexBuffer.insert(o,0,o.byteLength/4,f)}}copyRecordFrom(e,r,i,s){const{indexStart:o,indexCount:f,vertexStart:n,vertexCount:u}=r;this._ensure(f,u);const a=e._position,h=i*(a.packPrecisionFactor??1),d=s*(a.packPrecisionFactor??1),m=a.offset,c=t(h,d),l=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,c,m),_=this._indexBuffer.copyFrom(e._indexBuffer,o,f,l-n,0),p=r.clone();return p.vertexStart=l,p.indexStart=_,p.overlaps=0,p}remove(e,t,r,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(r,i)}upload(){this._invalidatedGeometry=!0,this._invalidatedCompute=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedGeometry){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!1),i=this._vertexBuffer.getGPUBuffer(e);this._geometryVAO||(this._geometryVAO=new o(e,t.locations,n(this.layout,t),new Map([[\"geometry\",i]]),r)),this._invalidatedGeometry=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedCompute){(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!0),i=this._vertexBuffer.getGPUBuffer(e);this._computeVAO||(this._computeVAO=new o(e,t.locations,u(this.layout,t),new Map([[\"geometry\",i]]),r),this._invalidatedCompute=!1)}return this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}export{a as MappedMesh};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{unpackDataView as e}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import i from\"../util/Reader.js\";import{deserializeList as r}from\"../util/serializationUtils.js\";function o(e){if(!e)return null;return{entities:r(new i(e.entities),t),vertexData:e.data.map(a)}}function a(t){const i=t.layout.stride,r=new DataView(t.vertices),o=[],a=t.vertices.byteLength/i;let s=0;for(let n=0;n<a;n++){const a={};for(const i of t.layout.attributes){let t=`${i.offset} ${i.name}`,o=e(r,i,s);if(i.packPrecisionFactor)if(t+=` (precision: ${i.packPrecisionFactor})`,\"number\"==typeof o)o/=i.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=i.packPrecisionFactor;a[t]=o}s+=i,o.push(a)}return{vertices:o,layout:t.layout}}export{o as debugMeshDataInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{AFeatureTile as s}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as i,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as r,RESHUFFLING_EXEMPT_DRAW_CALLS as o,RESHUFFLING_TARGET_DRAW_EFFICIENCY as d,tileSize as n}from\"./definitions.js\";import h from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as a}from\"./enums.js\";import{DisplayList as l}from\"./FeatureDisplayList.js\";import{ReshufflePlan as f}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as p}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as _}from\"./mesh/meshDebugUtils.js\";import m from\"./util/Reader.js\";import{deserializeList as c}from\"./util/serializationUtils.js\";const y=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class b extends s{constructor(e,s,i,r,o=!1){super(e,s,i,r),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this._objectIdMap=null,this.visible=!0,this.transforms.labelMat2d=t(),this.enableDeferredUploads=o}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this.isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),!0)}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get hasAnimations(){return!!this._objectIdMap}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),t===a.BATCHING&&this.reshuffle(!0),this._displayList=l.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){if(e.objectIdMap)for(const t in e.objectIdMap)this._objectIdMap||(this._objectIdMap={}),this._objectIdMap[t]=e.objectIdMap[t];switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:_(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=c(new m(e.append.entities),h);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:_(e.modify),remove:e.remove});const t=c(new m(e.modify.entities),h),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new f(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&y().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*n,o=i*n;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=e.getMesh(i.instanceId),n=this._ensureMesh(i.instanceId,t.layout).copyRecordFrom(t,i,r,o);s||(s=new h(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entities.push(s)),s.records.push(n)}}this._invalidated=!0}_ensureMesh(e,t){return this._meshes.has(e)||this._meshes.set(e,new p(this._stage.bufferPool,t)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e,layout:i}=s,r=this._ensureMesh(e,i).append(s);if(s.metrics){const e=c(new m(s.metrics),u)??[];this._metrics.push(...e)}t.set(e,r)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const i of this._entities)t.has(i.id)?this._remove(i):s.push(i);this._entities=s,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id);for(let t=this._metrics.length-1;t>=0;t--)this._metrics[t].entityTexel===e.id&&this._metrics.splice(t,1)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const e of this._meshes.values())this.debugInfo.memory.bytesUsed+=e.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=e.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:n,length:h}=this.debugInfo.display;return t>i&&s<r||h>o&&n/h<d}get entityIds(){return this._objectIdMap?this._entities.map((({id:e})=>({objectId:this._objectIdMap[e],displayId:e}))):[]}}export{b as FeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nconst n=new Float32Array(1),t=new Uint32Array(n.buffer);function r(n,t,r){return Math.round(Math.max(Math.min(n,r),t))}function u(n){return r(n,-128,127)}function o(n){return r(n,-32768,32767)}function e(n){return r(n,-2147483648,2147483647)}function c(n){return r(n,0,255)}function f(n){return r(n,0,65535)}function i(n){return r(n,0,4294967295)}function a(r){return n[0]=r,t[0]}function h(r){return t[0]=r,n[0]}function l(n){return[255&n,(65280&n)>>>8,(16711680&n)>>>16,(4278190080&n)>>>24]}function M(n,t){return 15&n|(15&t)<<4}function s(n,t){return 65535&n|t<<16}function m(n,t,r,u){return 255&n|(255&t)<<8|(255&r)<<16|u<<24}function w(n,t,r){return 255&n|(255&t)<<8|r<<16}function x(n){return 0|n}function y(n){const t=a(n),r=t>>>31;let u=t>>>23&255,o=8388607&t;return u-=127,u>15?r<<15|31744:u<-25?0:(u<-14&&(o+=8388608,o/=2**(-14-u),u=-15),u+=15,o/=8192,o=A(o,1023),r<<15|u<<10|o)}function A(n,t){const r=Math.floor(n),u=n-r;return r<t&&(u>.5||.5===u&&r%2==1)?r+1:r}function b(n){let t=n>>>15,r=n>>10&31,u=1023&n;return t=t?-1:1,r-=15,u/=1024,r>-15?u+=1:r=-14,t*2**r*u}export{b as fromUint16,o as i16,s as i1616to32,e as i32,u as i8,w as i8816to32,m as i8888to32,x as numTo32,h as toFloat32,y as toUint16,a as toUint32,f as u16,i as u32,l as u32to4Xu8,M as u4u4to8,c as u8};\n"],"names":["i","constructor","e","s","r","this","transformedX","transformedY","center","t","centerT","h","halfWidth","halfHeight","width","height","x","y","blX","blY","trX","trY","xmin","xmax","ymin","ymax","clone","serialize","writeF32","push","findCollisionDelta","arguments","length","undefined","Math","abs","n","min","log2","extend","max","deserialize","readF32","readInt32","o","a","entityTexel","anchorX","anchorY","directionX","directionY","maxScale","minScale","referenceBounds","bounds","size","offsetX","offsetY","d","c","F","f","l","u","has","create","acquireUint32Array","_array","_pool","array","getUint32View","Uint32Array","buffer","byteOffset","expand","byteLength","set","releaseUint32Array","destroy","_data","ArrayBuffer","BYTE_LENGTH","_freeList","start","end","firstFit","BYTES_PER_ELEMENT","free","_pages","_pagesByBuffer","Map","_bytesAllocated","_bytesTotal","console","log","_addPage","get","shaders","vertexShader","fragmentShader","attributes","id","sortKey","records","byteSizeHint","background","bitBlit","debug","overlay","dot","filtering","heatmap","heatmapResolve","highlight","materials","fill","hittest","icon","heatmapAccumulate","label","line","pie","shared","text","blit","bloom","composite","gaussianBlur","luminosityHighPass","blur","dra","sobel","filterEffect","pp","raster","common","flow","imagery","particles","streamlines","hillshade","lut","magdir","reproject","rfx","aspect","bandarithmetic","colormap2rgb","compositeband","computechange","contrast","convolution","curvature","extractband","focalstatistics","grayscale","local","mask","ndvi","remap","slope","stretch","vs","scalar","stencil","test","tileInfo","util","split","forEach","resolveIncludes","g","_ref","coords","lengths","slice","m","p","_cache","vertices","indices","primitiveType","isMapSpace","fromPath","path","floor","geometry","TRIANGLES","fromGeometry","type","fromPolygon","fromMapExtent","getLogger","error","fromScreenExtent","toScreen","_ref2","indexBuffer","dispose","vertexBuffers","elementType","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_INT","getIndexBuffer","STATIC_DRAW","createIndex","getVertexBuffers","Object","keys","reduce","createVertex","Array","super","_clip","stage","_handle","version","_invalidate","ready","fromClipArea","_destroyGL","mesh","vao","remove","getVAO","_lastWidth","_lastHeight","_createMesh","_createTransforms","displayViewScreenMat3","requestRender","clips","_updateClippingInfo","renderChildren","painter","setPipelineState","_renderPasses","prepareRenderPasses","render","registerRenderPass","name","brushes","clip","target","_clippingInfos","drawPhase","MAP","LABEL","LABEL_ALPHA","DEBUG","HIGHLIGHT","items","map","instanceId","textureKey","indexStart","indexCount","vertexStart","vertexCount","overlaps","updateBaseOffsets","vertexFrom","indexFrom","write","b","_color","_outlineProgram","_tileInfoProgram","_outlineVertexArrayObject","_tileInfoVertexArrayObject","_ctx","prepareState","context","setBlendingEnabled","setBlendFunctionSeparate","ONE","ONE_MINUS_SRC_ALPHA","setColorMask","setStencilWriteMask","setStencilTestEnabled","draw","allowDelayedRender","isReady","hasData","_loadWGLResources","compiled","bindVAO","useProgram","setUniformMatrix3fv","transforms","setUniform2f","rangeX","rangeY","setUniform1f","setUniform4fv","drawArrays","LINE_STRIP","_getTexture","bindTexture","descriptor","TRIANGLE_STRIP","Int8Array","document","createElement","getContext","tileDebugInfoTexture","wrapMode","CLAMP_TO_EDGE","samplingMode","LINEAR","isImmutable","clearRect","canvas","textAlign","textBaseline","font","lineWidth","fillStyle","strokeStyle","debugSlot","key","strokeText","fillText","debugInfo","minOrderedLength","minUnorderedLength","triangleCount","display","bytesUsed","bytesReserved","memory","setData","next","isArray","data","values","last","_head","head","maxAvailableSpace","clear","packPrecisionFactor","BYTE","count","setInt8","offset","setUint8","Uint8Array","SHORT","setInt16","Int16Array","setUint16","Uint16Array","INT","setInt32","Int32Array","setUint32","FLOAT","setFloat32","Float32Array","HALF_FLOAT","E","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","setTransform","resolution","tileMat3","toScreenNoRotation","displayViewMat3","labelMat2d","viewMat2d","containsScreenPoint","viewMat3","UNSIGNED_SHORT_4_4_4_4","location","stride","$","normalized","strides","bufferLayouts","includes","charCodeAt","seed","randomization","maxRandomOffset","numberOfSizes","variationMethod","extremityPlacement","offsetAlongLine","beginPosition","endPosition","flipFirst","JSON","stringify","positionArray","interval","skipMarkerRate","placeAtExtremities","stepX","stepY","randomness","gridType","shiftOddRows","relativeTo","startPointOffset","placeOnControlPoints","placeOnEndPoints","placeOnRegularVertices","method","_program","setFaceCullingEnabled","setStencilOp","KEEP","REPLACE","setStencilFunction","ALWAYS","state","setUniform2fv","displayMat3","drawElements","tileDebugInfo","vtlBackground","vtlFill","vtlLine","vtlCircle","vtlSymbol","_","_initialized","_solidProgram","_solidVertexArrayObject","setDepthWriteEnabled","setDepthTestEnabled","_initialize","setStencilFunctionSeparate","FRONT_AND_BACK","GREATER","stencilRef","instance","materialKey","indexEnd","techniqueRef","getStencilReference","getAttributePrecisionPackFactors","getMesh","drawCompute","drawGeometry","getComputeVAO","POINTS","getGeometryVAO","_length","_minOrderedLength","_materialKeys","Set","fromDisplayEntities","getInstance","addRecord","infos","_tail","STRICT_ORDER","_insert","symbologyPlane","STRICT_MARKERS_AND_TEXT","MARKER","TEXT","add","_insertAtHead","_insertAtEnd","_insertAtMiddle","_indexOnly","vertex","operations","index","copyRecord","srcFrom","dstFrom","mutate","strideInt","bufferType","dirty","memoryStats","_gpu","_cpu","elementSize","intSize","fillPointer","byteSize","invalidated","bufferSize","invalidatedComputeBuffer","_gpuComputeTriangles","invalidate","_invalidateTriangleBuffer","freeList","ensure","round","getGPUBuffer","Error","_createComputeBuffer","_createBuffer","getView","insert","copyFrom","upload","setSubData","reshuffle","DYNAMIC_DRAW","_bufferPool","_layout","_invalidatedGeometry","_invalidatedCompute","_position","find","_indexBuffer","_vertexBuffer","_computeVAO","disposeVAOOnly","_geometryVAO","layout","getDrawArgs","primitive","getDebugVertexInfo","computeAttributeMap","DataView","_ensure","append","copyRecordFrom","locations","filter","divisor","_pos","_buffer","_i32View","_f32View","entities","vertexData","_meshes","_entities","_invalidated","_nextUploadAllowed","tileAge","_metrics","_entityIds","_entityIdsFromBuffer","_attributeEpoch","_encounteredEnd","_objectIdMap","visible","enableDeferredUploads","_displayList","beforeRender","_needsReshuffle","reshuffleManager","schedule","tryReady","_uploadAllowed","labelMetrics","hasAnimations","needsUpload","getDisplayList","sort","BATCHING","getSortKeys","onMessage","objectIdMap","_onAppendMessage","_onUpdateMessage","_aggregateMemoryStats","attributeEpoch","isPixelBuffer","modify","_removeByIdsFromBuffer","_removeByIds","destroyed","info","copyPixelBufferedEntitesFrom","_ensureMesh","_stage","bufferPool","_removeDuplicatedBufferedEntites","_insertVertexData","_tryInsertBufferedEntity","_insertEntity","metrics","_removeRecordsFromMesh","_remove","delete","splice","entityIds","objectId","displayId","A"],"sourceRoot":""}